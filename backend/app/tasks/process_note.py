# backend/app/tasks/process_note.py
import requests

# REMOVED: import logging (using Structlog now)
from celery_worker import celery
from app.db.session import SessionLocal
from app.services.note_service import note as note_service
from app.services.search_service import add_note_to_index

# IMPORT Structlog helper
from app.core.logging_config import get_logger

# Use Structlog logger
log = get_logger(__name__)

AI_SERVICE_URL = "http://ai:8001/summarize"


@celery.task
def summarize_note_task(note_id: int):
    """
    Celery task to generate, save summary, and index the note.
    """
    db = SessionLocal()
    summary = None
    note = None
    try:
        note = note_service.get(db, id=note_id)
        if not note:
            log.warning("Note not found", note_id=note_id)
            db.close()
            return None

        # Call the AI microservice
        log.info("Calling AI service for summary", note_id=note_id)  # Added log
        response = requests.post(AI_SERVICE_URL, json={"text": note.content})

        # --- MOVED THESE LINES INSIDE TRY BLOCK ---
        response.raise_for_status()  # Check for HTTP errors
        summary_json = response.json()
        # --- END MOVE ---
        summary = summary_json.get("summary")

        if summary:
            note.summary = summary
            db.add(note)
            db.commit()
            db.refresh(note)
            log.info(
                "Summary saved to DB", note_id=note_id, summary_length=len(summary)
            )  # Log length instead of full summary

            # Call search service to index the note (this uses its own logger)
            add_note_to_index(note)

        else:
            log.warning("No summary generated by AI", note_id=note_id)

    except requests.exceptions.RequestException as e:
        log.error(
            "Error calling AI service", note_id=note_id, error=str(e), exc_info=True
        )
        db.rollback()
    except Exception as e:
        log.error(
            "Unexpected error in summarize task",
            note_id=note_id,
            error=str(e),
            exc_info=True,
        )
        db.rollback()
    finally:
        db.close()

    return summary
